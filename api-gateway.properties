# ...\EzPark-Configs\api-gateway.properties

server.port=8080
spring.application.name=api-gateway


# Configuración del Gateway
eureka.instance.prefer-ip-address=true
eureka.instance.hostname=api-gateway
eureka.instance.non-secure-port-enabled=true
eureka.instance.non-secure-port=${server.port}

spring.cloud.gateway.discovery.locator.enabled=false

management.endpoints.web.exposure.include=health,info

management.endpoint.health.show-details=always

# ==========================================================
# RUTAS PARA MICROSERVICIOS
# ==========================================================

# IAM Service - Autenticación y otros endpoints
# El cliente llamará a /api/auth/authentication/sign-up, /api/auth/roles, /api/auth/users
spring.cloud.gateway.routes[0].id=iam_management_route
spring.cloud.gateway.routes[0].uri=lb://iam-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/auth/**
spring.cloud.gateway.routes[0].filters[0]=RewritePath=/api/auth/(?<remaining>.*), /api/v1/$\{remaining}

# Profile Service - Gestión de perfiles
# El cliente llamará a /api/profiles/
spring.cloud.gateway.routes[1].id=profile_management_route
spring.cloud.gateway.routes[1].uri=lb://profile-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/profiles/**
spring.cloud.gateway.routes[1].filters[0]=RewritePath=/api/profiles(?<remaining>.*), /api/v1/profiles$\{remaining}


# Vehicle Service - Gestión de vehículos
# El cliente llamará a /api/vehicles-management/vehicles, /api/vehicles-management/brands, /api/vehicles-management/models
spring.cloud.gateway.routes[2].id=vehicle_management_route
spring.cloud.gateway.routes[2].uri=lb://vehicle-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/vehicles-management/**
spring.cloud.gateway.routes[2].filters[0]=RewritePath=/api/vehicles-management/(?<remaining>.*), /api/v1/$\{remaining}

# Parking Service - Gestión de estacionamientos
# El cliente llamará a /api/parking-management/location, /api/parking-management/parking, /api/parking-management/schedule
spring.cloud.gateway.routes[3].id=parking_management_route 
spring.cloud.gateway.routes[3].uri=lb://parking-service
spring.cloud.gateway.routes[3].predicates[0]=Path=/api/parking-management/**
spring.cloud.gateway.routes[3].filters[0]=RewritePath=/api/parking-management/(?<remaining>.*), /api/v1/$\{remaining}

# Reservation Service - Gestión de reservas
# El cliente llamará a /api/reservations/...
spring.cloud.gateway.routes[4].id=reservation_management_route
spring.cloud.gateway.routes[4].uri=lb://reservation-service
spring.cloud.gateway.routes[4].predicates[0]=Path=/api/reservations/**
spring.cloud.gateway.routes[4].filters[0]=RewritePath=/api/reservations(?<remaining>.*), /api/v1/reservations$\{remaining}

# Payment Service - Gestión de pagos
# El cliente llamará a /api/payments/...
spring.cloud.gateway.routes[5].id=payment_management_route
spring.cloud.gateway.routes[5].uri=lb://payment-service
spring.cloud.gateway.routes[5].predicates[0]=Path=/api/payments/**
spring.cloud.gateway.routes[5].filters[0]=RewritePath=/api/payments(?<remaining>.*), /api/v1/payments$\{remaining}

# Review Service - Gestión de reseñas
# El cliente llamará a /api/reviews/...
spring.cloud.gateway.routes[6].id=review_management_route
spring.cloud.gateway.routes[6].uri=lb://review-service
spring.cloud.gateway.routes[6].predicates[0]=Path=/api/reviews/**
spring.cloud.gateway.routes[6].filters[0]=RewritePath=/api/reviews(?<remaining>.*), /api/v1/reviews$\{remaining}

# ==========================================================
# CONFIGURACIÓN DE CORS
# ==========================================================
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-origins=http://localhost:3000,http://localhost:4200, http://localhost:5173, http://localhost:5174
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-headers=*
spring.cloud.gateway.globalcors.cors-configurations.[/**].allow-credentials=true

# ==========================================================
# CONFIGURACIÓN DE SEGURIDAD
# ==========================================================
security.gateway.secret=${GATEWAY_SECRET:myGatewaySecret123}
authorization.jwt.secret=${JWT_SECRET:AbCdEfGhIjKlMnOpQrStUvWxYz1234567890}

# ==========================================================
# CONFIGURACIÓN DE TIMEOUTS
# ==========================================================
spring.cloud.gateway.httpclient.connect-timeout=3000
spring.cloud.gateway.httpclient.response-timeout=5s
